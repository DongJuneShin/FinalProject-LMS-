package kr.or.ddit.student.controller;

import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class manyStudentController {
	
	@RequestMapping("/manyStudent.do")
	public String manyStudent(Model model, MultipartFile poie) {
		
		log.info("poi에 왔다.");
	    try {
	    	// 경로에 있는 파일을 읽
	        FileInputStream file = new FileInputStream("D:\\D_Other\\ex.xlsx");
	        InputStream initialStream = poie.getInputStream();
	        XSSFWorkbook workbook;
	        if(!poie.isEmpty()) {
	        	workbook = new XSSFWorkbook(initialStream);
	        }else {
	        	workbook = new XSSFWorkbook(file);
	        }
	        
	
	        int rowNo = 0;
	        int cellIndex = 0;
	        
	        XSSFSheet sheet = workbook.getSheetAt(0); // 0 번째 시트를 가져온다 
	        										  // 만약 시트가 여러개 인 경우 for 문을 이용하여 각각의 시트를 가져온다
	      //-------------------------------------------------
	        List<List<String>> excelList = new ArrayList<List<String>>();	//list 생성(*)
	      //-------------------------------------------------
	        int rows = sheet.getPhysicalNumberOfRows(); // 사용자가 입력한 엑셀 Row수를 가져온다
	        for(rowNo = 0; rowNo < rows; rowNo++){
	        	//-------------------------------------------------
	        	List<String> list = new ArrayList<String>();	//list2 생성(*) 
	        	//-------------------------------------------------
	            XSSFRow row = sheet.getRow(rowNo);
	            if(row != null){
	                int cells = row.getPhysicalNumberOfCells(); // 해당 Row에 사용자가 입력한 셀의 수를 가져온다
	                for(cellIndex = 0; cellIndex <= cells; cellIndex++){  
	                    XSSFCell cell = row.getCell(cellIndex); // 셀의 값을 가져온다	        
	                    String value = "";	                    
	                    if(cell == null){ // 빈 셀 체크 
	                        continue;
	                    }else{
	                        // 타입 별로 내용을 읽는다
	                        switch (cell.getCellType()){
	                        case XSSFCell.CELL_TYPE_FORMULA:
	                            value = cell.getCellFormula();
	                            break;
	                        case XSSFCell.CELL_TYPE_NUMERIC:
	                            value = cell.getNumericCellValue() + "";
	                            break;
	                        case XSSFCell.CELL_TYPE_STRING:
	                            value = cell.getStringCellValue() + "";
	                            break;
	                        case XSSFCell.CELL_TYPE_BLANK:
	                            value = cell.getBooleanCellValue() + "";
	                            break;
	                        case XSSFCell.CELL_TYPE_ERROR:
	                            value = cell.getErrorCellValue() + "";
	                            break;
	                        }
	                    }
	                    System.out.println( rowNo + "번 행 : " + cellIndex + "번 열 값은: " + value);
	                    list.add(value); //{"0번 열","값"}
	                    System.out.println("innerlist : "+ list.toString());
	                    
	                }//반복끝(셀)
	                System.out.println("------------");
	                excelList.add(list);	//[0]{"0번 열","값"}/[1]{"0번 열","값"}
	                System.out.println("list : "+ excelList.toString());
	                model.addAttribute("excel",excelList);
	            }
	        }//row  반복
	    }catch(Exception e) {
    		e.printStackTrace();
    	}
	    
	    return "poi/poi";
		
	}

}
