<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : xml파일이 여러개일 수 있으므로
	이를 구별하기 위한 식별 용도로 사용
 -->
<mapper namespace="kr.or.ddit.mapper.CourseMapper">
	<!-- (학생) 금학기 수강 목록 조회 -->
	<select id="getCourseList" parameterType="integer" resultType="courseVO">
		SELECT A.SBJ_NUM, A.TEA_NUM, A.SBJ_TITLE, B.TEA_NM_KOR, C.STU_NUM
		FROM SUBJECT A
		INNER JOIN TEACHER B
		ON(A.TEA_NUM = B.TEA_NUM)
		INNER JOIN COURSE_LIST C
		ON(A.SBJ_NUM = C.SBJ_NUM)
		WHERE C.STU_NUM = #{stuNum}
		AND A.SBJ_OC = 1
	</select>
	
	<!-- (교수)금학기 강의 목록 조회 -->
	<select id="getCourseListPro" parameterType="integer" resultType="courseVO">
		SELECT SBJ_NUM, TEA_NUM, SBJ_TITLE
		FROM SUBJECT
		WHERE TEA_NUM = #{teaNum}
	</select>
	
	<select id="getCourseListProByMap" parameterType="integer" resultType="HashMap">
		SELECT SBJ_NUM, TEA_NUM, SBJ_TITLE
		FROM SUBJECT
		WHERE TEA_NUM = #{teaNum}
	</select>
	
	
	<!-- (학생)주차별 목록 조회 -->
	<select id="detail" parameterType="courseVO" resultType="courseDetailVO">
		SELECT A.SI_NUM, A.SI_TARGET, A.SI_ONLINE, B.SP_ONLINEYN, A.SI_HWYN
		FROM SUBJECT_INDEX A
		INNER JOIN SUBJECT_PLAN B
		ON(A.SP_NUM = B.SP_NUM)
		WHERE A.SBJ_NUM=#{sbjNum}
		ORDER BY TO_NUMBER(A.SI_NUM)
	</select>
	
	<!-- 공지사항 목록 조회 -->
	<select id="getNoticeList" parameterType="courseVO" resultType="courseNoticeVO">
		SELECT ROW_NUMBER() OVER(ORDER BY A.SN_NUM) ROW_NUM, A.SN_NUM, A.SN_TITLE, B.TEA_NM_KOR, A.SN_DT
			 , A.SN_HIT, A.SN_READ
		FROM SUBJECT_NOTICE A
		INNER JOIN TEACHER B
		ON(A.TEA_NUM = B.TEA_NUM)
		WHERE A.SBJ_NUM = #{sbjNum}
		ORDER BY A.SN_NUM DESC
	</select>
	
	<!-- 과제 목록 조회 -->
	<select id="getAssignmentList" parameterType="String" resultType="courseAssignmentVO">
		SELECT ROW_NUMBER() OVER(ORDER BY TO_NUMBER(A.SI_NUM) DESC) ROW_NUM, A.AS_NUM, A.SI_NUM, A.AS_TITLE, A.AS_CONTENT, A.SP_NUM
		     , A.SBJ_NUM, A.AS_SDT, A.AS_EDT , B.SBM_NUM
		FROM ASSIGNMENT A
		LEFT OUTER JOIN SUBMIT B
		ON(A.AS_NUM = B.SBM_ANUM)
		WHERE A.SBJ_NUM = #{sbjNum}
	</select>
	
	<!-- 과제 상세내용 조회 -->
	<select id="assignmentDetail" parameterType="courseAssignmentVO" resultType="courseAssignmentVO">
		SELECT AS_NUM, SI_NUM, AS_TITLE, AS_CONTENT, SP_NUM
		     , SBJ_NUM, AS_SDT, AS_EDT
		FROM ASSIGNMENT
		WHERE SBJ_NUM = #{sbjNum}
		AND AS_NUM = #{asNum}
	</select>
	
	<!-- (학생)과제 제출 여부 조회 -->
	<select id="submitCheck" parameterType="submitVO" resultType="submitVO">
		SELECT SBM_NUM, SBM_ANUM, SBM_CONTENT, SBM_FILENAME, SBM_SCORE, STU_NUM
		FROM SUBMIT
		WHERE SBM_ANUM = #{sbmAnum}
		AND STU_NUM = #{stuNum}
	</select>
	
	<!-- (학생)과제 제출 -->
	<insert id="submitAssignment" parameterType="submitVO">
		MERGE INTO SUBMIT A
		USING DUAL
		ON(A.SBM_NUM = #{sbmNum})
		WHEN MATCHED THEN
		    UPDATE SET SBM_CONTENT = #{sbmContent}, SBM_FILENAME=#{sbmFilename}
		WHEN NOT MATCHED THEN
		    INSERT (SBM_NUM, SBM_ANUM, SBM_CONTENT, SBM_FILENAME, SBM_SCORE, STU_NUM)
		    VALUES(SEQ_SUBMIT.NEXTVAL, #{sbmAnum}, #{sbmContent},#{sbmFilename}, NULL, #{stuNum})
	</insert>
	
	<!-- (과목별)과제 등록가능한 주차 목록 출력 -->
	<select id="getSiList" parameterType="String" resultType="subjectIndexVO">
		SELECT SI_NUM, SP_NUM, SBJ_NUM, SI_TARGET, SI_ONLINE, SI_HWYN
		FROM SUBJECT_INDEX
		WHERE SBJ_NUM = #{sbjNum}
		AND SI_HWYN = 1
	</select>
	
	<!-- (교수)과제 등록 -->
	<insert id="createAssignment" parameterType="courseAssignmentVO">
		INSERT INTO ASSIGNMENT(AS_NUM, SI_NUM, AS_TITLE, AS_CONTENT, SP_NUM
		                     , SBJ_NUM, AS_SDT, AS_EDT
		)VALUES(SEQ_ASSIGNMENT.NEXTVAL, #{siNum}, #{asTitle}, #{asContent}, #{spNum}
		      , #{sbjNum}, #{asSdt}, #{asEdt})
	</insert>
	
	<!-- (교수)과제 수정 -->
	<update id="updateAssignment" parameterType="courseAssignmentVO">
		UPDATE ASSIGNMENT
		SET	   AS_TITLE = #{asTitle}
		  	 , AS_CONTENT = #{asContent}
		  	 , AS_SDT = #{asSdt}
  		  	 , AS_EDT = #{asEdt}
		WHERE AS_NUM = #{asNum}
	</update>
	
	<!--(교수)과제 삭제 -->
	<delete id="deleteAssignment" parameterType="int">
		DELETE FROM ASSIGNMENT
		WHERE AS_NUM = #{asNum}
	</delete>
	
	<!-- 자료 목록 조회 -->
	<select id="getReferenceList" parameterType="courseVO" resultType="courseReferenceVO">
		SELECT ROW_NUMBER() OVER(ORDER BY A.RR_NUM) ROW_NUM
		     , A.*
		FROM REFERENCE_ROOM A
		WHERE SBJ_NUM = #{sbjNum}
		ORDER BY ROW_NUM DESC
	</select>
	
	<!-- 공지사항 상세내용 조회 -->
	<select id="noticeDetail" parameterType="courseNoticeVO" resultType="courseNoticeVO">
		SELECT A.SN_NUM, A.SN_TITLE, A.SN_CONTENT, A.SN_DT, A.SN_HIT
		     , A.SN_FILENAME, C.TEA_NM_KOR
		FROM SUBJECT_NOTICE A
		INNER JOIN SUBJECT B
		ON(A.SBJ_NUM = B.SBJ_NUM)
		INNER JOIN TEACHER C
		ON(B.TEA_NUM = C.TEA_NUM)
		WHERE A.SN_NUM = #{snNum}
		ORDER BY A.SN_NUM DESC
	</select>
	
	<!-- (교수)수강생 목록 조회 -->
	<select id="getStudentList" parameterType="String" resultType="HashMap">
		SELECT A.STU_NUM, C.DEPT_NM, A.STU_NM_KOR, B.SBJ_NUM
		FROM STUDENT A
		INNER JOIN COURSE_LIST B
		ON(A.STU_NUM = B.STU_NUM)
		INNER JOIN DEPARTMENT C
		ON(A.DEPT_NUM = C.DEPT_NUM)
		WHERE B.SBJ_NUM = #{sbjNum}
	</select>
	
	<!-- (교수)공지사항 등록 -->
	<insert id="createNotice" parameterType="courseNoticeVO">
		INSERT INTO SUBJECT_NOTICE(
									SN_NUM, SBJ_NUM, TEA_NUM, SN_TITLE, SN_CONTENT
								  , SN_DT, SN_FILENAME, SN_HIT, SN_READ
		)VALUES(SEQ_SUBJECT_NOTICE.NEXTVAL, #{sbjNum}, #{teaNum}, #{snTitle}, #{snContent}
			  , SYSDATE, #{snFilename}, 0, #{snRead}
		)
	</insert>
	
	<!-- (교수)공지사항 수정 -->
	<update id="noticeModify" parameterType="courseNoticeVO">
		UPDATE SUBJECT_NOTICE 
		SET SN_TITLE = #{snTitle}
		  , SN_CONTENT = #{snContent}
		WHERE SN_NUM = #{snNum}
	</update>
	
	<!-- (교수)공지사항 삭제 -->	
	<delete id="deleteNotice" parameterType="courseNoticeVO">
		DELETE FROM SUBJECT_NOTICE
		WHERE SBJ_NUM=#{sbjNum}
		AND SN_NUM = #{snNum}
	</delete>
	
	<!-- 공지사항 조회수 증가 -->
	<update id="increaseNoticeHit" parameterType="courseNoticeVO">
		UPDATE SUBJECT_NOTICE
		SET SN_HIT = #{snHit} + 1
		WHERE SN_NUM = #{snNum}
	</update>
	
	<!-- (교수)자료 게시글 등록 -->
	<insert id="createReference" parameterType="courseReferenceVO">
		INSERT INTO REFERENCE_ROOM(RR_NUM, SBJ_NUM, RR_TITLE, RR_NM) 
		VALUES(SEQ_REFERENCE_ROOM.NEXTVAL, #{sbjNum}, #{rrTitle}, #{rrNm})
	</insert>
	
	<!-- (교수)자료 게시글 삭제 -->
	<delete id="deleteReference" parameterType="courseReferenceVO">
		DELETE FROM REFERENCE_ROOM
		WHERE RR_NUM = #{rrNum}
	</delete>
	
	<!-- 출석 -->
	<!-- 과목별 수강생 출석현황 목록 출력 -->
	<select id="selectAttendanceList" parameterType="String" resultType="HashMap">
		SELECT X.STU_NUM, X.STU_NM_KOR, X.DEPT_NM, Y.LT_NUM, Y.AT_WEEK, Y.AT_CHECK
		FROM 
		    (SELECT C.STU_NUM, D.STU_NM_KOR, D.DEPT_NM
		     FROM COURSE_LIST C, 
		            (SELECT A.STU_NUM, A.STU_NM_KOR, B.DEPT_NM
		             FROM STUDENT A, DEPARTMENT B
		             WHERE A.DEPT_NUM = B.DEPT_NUM) D
		     WHERE C.STU_NUM=D.STU_NUM AND C.SBJ_NUM=#{sbjNum}) X,
		    (SELECT AT_STU_NUM, 
		        LISTAGG(LT_NUM, ', ') WITHIN GROUP ( ORDER BY LT_NUM ) AS LT_NUM,
		        AT_WEEK,
		        AT_CHECK
		    FROM ATTENDANCE
		    GROUP BY AT_STU_NUM, AT_WEEK, AT_CHECK
		    ORDER BY AT_STU_NUM, AT_WEEK, LT_NUM) Y
		WHERE Y.AT_STU_NUM = X.STU_NUM(+)
	</select>
	
	<!-- 주차별 강의 횟수 카운트 -->
	<select id="countLecture" parameterType="String" resultType="hashMap">
		SELECT COUNT(DISTINCT SUBSTR(TIME_TCODE,1,3)) AS COUNT
		FROM LECTURE_TM
		WHERE SBJ_NUM = #{sbjNum}
	</select>
	
	<!-- 과목별 수강생 출석현황 출력2 -->
	<select id="getAttendanceList" parameterType="String" resultType="HashMap">
		SELECT S.STU_NM_KOR, S.STU_NUM, P.DEPT_NM, X.ATTEND, X.LATE, X.ABSENT
		FROM STUDENT S
		INNER JOIN(
		           SELECT
			             D.SBJ_NUM
			           , SUBSTR(D.TIME_TCODE,1,3) AS TIME_TCODE
			           , E.AT_STU_NUM AS AT_STU_NUM--, E.AT_WEEK, E.AT_CHECK
			           , NVL(T.ATTEND, 0) AS ATTEND
			           , NVL(L.LATE, 0) AS LATE
			           , NVL(B.ABSENT, 0) AS ABSENT
		           FROM LECTURE_TM D
		           INNER JOIN ATTENDANCE E
		           ON(E.LT_NUM = D.LT_NUM)
		           LEFT OUTER JOIN (
		                               SELECT A.AT_STU_NUM, COUNT(AT_CHECK) AS ATTEND
		                               FROM(SELECT DISTINCT AT_STU_NUM, AT_WEEK, AT_CHECK
		                                     FROM ATTENDANCE
		                                     ORDER BY 1)A
		                               WHERE A.AT_CHECK = 1
		                               GROUP BY A.AT_STU_NUM)T
		           ON(T.AT_STU_NUM = E.AT_STU_NUM)
		           LEFT OUTER JOIN (
		                            SELECT A.AT_STU_NUM, COUNT(AT_CHECK) AS LATE
		                            FROM(SELECT DISTINCT AT_STU_NUM, AT_WEEK, AT_CHECK
		                                 FROM ATTENDANCE
		                                 ORDER BY 1)A
		                            WHERE A.AT_CHECK = 0.67
		                            GROUP BY A.AT_STU_NUM)L
		          ON(L.AT_STU_NUM = E.AT_STU_NUM)
		          LEFT OUTER JOIN (
		                           SELECT A.AT_STU_NUM, COUNT(AT_CHECK) AS ABSENT
		                           FROM(SELECT DISTINCT AT_STU_NUM, AT_WEEK, AT_CHECK
		                                FROM ATTENDANCE
		                                ORDER BY 1)A
		                           WHERE A.AT_CHECK = 0
		                           GROUP BY A.AT_STU_NUM)B
		         ON(B.AT_STU_NUM = E.AT_STU_NUM)
		         GROUP BY D.SBJ_NUM
		            	, SUBSTR(D.TIME_TCODE,1,3)
		            	, E.AT_STU_NUM
		            	, NVL(T.ATTEND, 0)
		            	, NVL(L.LATE, 0)
		            	, NVL(B.ABSENT, 0)
		)X
		ON(S.STU_NUM = X.AT_STU_NUM)
		INNER JOIN DEPARTMENT P
		ON(S.DEPT_NUM = P.DEPT_NUM)
		WHERE X.SBJ_NUM = #{sbjNum}
		ORDER BY S.STU_NUM ASC
	</select>
	
	<!-- 전체 수강생 출석 목록 출력 -->
	<select id="getAllAtendanceList" parameterType="String" resultType="HashMap">
		SELECT DISTINCT A.STU_NUM, A.STU_NM_KOR, C.DEPT_NM, B.TIME_TCODE, B.AT_WEEK, B.AT_CHECK
		FROM STUDENT A
		INNER JOIN(
		    SELECT 
		    D.SBJ_NUM,
		    SUBSTR(D.TIME_TCODE,1,3) AS TIME_TCODE,
		    E.AT_WEEK, E.AT_CHECK ,E.AT_STU_NUM
		    FROM LECTURE_TM D
		    LEFT OUTER JOIN ATTENDANCE E
		    ON(E.LT_NUM = D.LT_NUM)
		    GROUP BY D.SBJ_NUM,
		    SUBSTR(D.TIME_TCODE,1,3),
		    E.AT_WEEK, E.AT_CHECK ,E.AT_STU_NUM
		) B
		ON(A.STU_NUM = B.AT_STU_NUM)
		INNER JOIN DEPARTMENT C
		ON(C.DEPT_NUM = A.DEPT_NUM)
		WHERE B.SBJ_NUM = #{sbjNum}
		ORDER BY A.STU_NUM, B.AT_WEEK
	</select>
</mapper>
