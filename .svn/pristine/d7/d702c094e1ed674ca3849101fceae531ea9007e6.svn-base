package kr.or.ddit.student.controller;

import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.vo.StudentVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class manyStudentController {

	@RequestMapping("/manyStudent.do")
	@ResponseBody
	public List<List<String>> manyStudent(@RequestParam Map<Object, Object> map, Model model, MultipartFile poie) {
		log.info("poi에 왔다.");
		log.info("2poi : " + poie);
		log.info("2poie.toString : " + poie.toString());

		log.info("map : " + map);
		List<List<String>> excelList =null;
		try {
			// 경로에 있는 파일을 읽
			FileInputStream file = new FileInputStream("D:\\D_Other\\ex.xlsx");
			log.info("poi : " + poie);
			log.info("poie.toString : " + poie.toString());
			InputStream initialStream = poie.getInputStream();
			XSSFWorkbook workbook = null;
			if (!poie.isEmpty()) {
				workbook = new XSSFWorkbook(initialStream);
			} else {
//	        	workbook = new XSSFWorkbook(file);
				log.info("파일 없음!!!!!!!!!!!!!");
				return null;
			}

			int rowNo = 0;
			int cellIndex = 0;

			XSSFSheet sheet = workbook.getSheetAt(0); // 0 번째 시트를 가져온다
														// 만약 시트가 여러개 인 경우 for 문을 이용하여 각각의 시트를 가져온다
			// -------------------------------------------------
			excelList = new ArrayList<List<String>>(); // list 생성(*)
			// -------------------------------------------------
			int rows = sheet.getPhysicalNumberOfRows(); // 사용자가 입력한 엑셀 Row수를 가져온다
			
			int selectRow;
			
			for (rowNo = 0; rowNo < rows; rowNo++) {
				// -------------------------------------------------
				List<String> list = new ArrayList<String>(); // list2 생성(*)
				// -------------------------------------------------
				XSSFRow row = sheet.getRow(rowNo);
				if (row != null) {
					int cells = row.getPhysicalNumberOfCells(); // 해당 Row에 사용자가 입력한 셀의 수를 가져온다
					for (cellIndex = 0; cellIndex <= cells; cellIndex++) {
						XSSFCell cell = row.getCell(cellIndex); // 셀의 값을 가져온다
						String value = "";
						if (cell == null) { // 빈 셀 체크
							continue;
						} else {
							// 타입 별로 내용을 읽는다
							switch (cell.getCellType()) {
							case XSSFCell.CELL_TYPE_FORMULA:
								value = cell.getCellFormula();
								break;
							case XSSFCell.CELL_TYPE_NUMERIC:
								value = cell.getNumericCellValue() + "";
								break;
							case XSSFCell.CELL_TYPE_STRING:
								value = cell.getStringCellValue() + "";
								break;
							case XSSFCell.CELL_TYPE_BLANK:
								value = cell.getBooleanCellValue() + "";
								break;
							case XSSFCell.CELL_TYPE_ERROR:
								value = cell.getErrorCellValue() + "";
								break;
							}
						}
						
						System.out.println(rowNo + "번 행 : " + cellIndex + "번 열 값은: " + value);	//check용
						list.add(value); 
//						System.out.println("innerlist : " + list.toString());	//check용
						

					} // 반복끝(셀)
	                excelList.add(list);	
//	                System.out.println("list : "+ excelList.toString());	//check용
	                String keyValue = "";
	                List<StudentVO> stuList;
	                
	                for(int i=0; i<excelList.size(); i++) {
	                	StudentVO stuVo;
	                	switch(excelList.get(0).get(i)) {
		                	case "학번" :	
		                		for(int j=0; j<excelList.size(); j++) {
		                			keyValue = excelList.get(j).get(i);
		                		}
		                			break;
		                	case "학과" :	keyValue = "deptNum";
		                	selectRow = rowNo;
		                	break;
		                	case "이름(한글)" :	keyValue = "stuNmKor";
		                	break;
		                	case "이름(영문)" :	keyValue = "stuNmEng";
		                	break;
		                	case "주민번호" :	keyValue = "stuReg"; //stuReg1,2
		                	break;
		                	case "이메일" :	keyValue = "stuEmail";
		                	break;
		                	case "연락처" :	keyValue = "stuPn";
		                	break;
		                	case "은행" :	keyValue = "stuBank";
		                	break;
		                	case "계좌번호" :	keyValue = "stuAccount";
		                	break;
	                	}	//switch end
	                	
	                	//vo stuSemester,stuStatus=default(안 넣어도 됨) stuSemester stuGrade
	                }
					model.addAttribute("excel", excelList);
				}
			} // row 반복
		} catch (Exception e) {
			e.printStackTrace();
		}

		return excelList;

	}

}
