package kr.or.ddit.course.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.course.service.CourseService;
import kr.or.ddit.vo.CourseAssignmentVO;
import kr.or.ddit.vo.CourseDetailVO;
import kr.or.ddit.vo.CourseNoticeVO;
import kr.or.ddit.vo.CourseReferenceVO;
import kr.or.ddit.vo.CourseVO;
import kr.or.ddit.vo.UserVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/course")
public class CourseController {
	
	@Autowired
	CourseService courseService;
	
	@GetMapping("/list2")
	public void list() {}
	
	//(학생)금학기 수강과목 목록 출력
	@GetMapping("/list")
	public String list(HttpSession session, Model model, String sbjNum) {
		
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		
		int stuNum = userVO.getUsername();
		
		log.info("list(학생)의 stuNum : " + stuNum);
		
		List<CourseVO> courseVOList = this.courseService.getCourseList(stuNum);
		model.addAttribute("data", courseVOList);
		
		log.info("courseVOList(학생) : " + courseVOList);
		
		return "course/list_stu";
	}
	
	//(교수)금학기 강의목록 출력
	@GetMapping("/list_pro")
	public String list_pro(HttpSession session, String sbjNum, Model model) {
		
		UserVO userVO = (UserVO) session.getAttribute("userVO");
		
		int teaNum = userVO.getUsername();
		
		log.info("session의 userVO : " + userVO );
		log.info("userVO의 getUsername(teaNum) : " + teaNum);
		
		List<CourseVO> courseVOList = this.courseService.getCourseListPro(teaNum);
		log.info("courseVOList(교수) : " + courseVOList);
//		courseVOList(교수) : [CourseVO(sbjNum=CHE01001, teaNum=200101, sbjTitle=생화학실험, teaNmKor=null, stuNum=0), CourseVO(sbjNum=CHE01002, teaNum=200101, sbjTitle=유기화학1, teaNmKor=null, stuNum=0)]
		
		model.addAttribute("data", courseVOList);
		
		List<Map<String, Object>> courseList = this.courseService.getCourseListProByMap(teaNum);
		log.info("courseList(Map : " + courseList);
//		courseList(Map : [{SBJ_NUM=CHE01001, TEA_NUM=200101, SBJ_TITLE=생화학실험}, {SBJ_NUM=CHE01002, TEA_NUM=200101, SBJ_TITLE=유기화학1}]
		
		
		return "course/list_pro";
	}
	
	
	//(학생)주차별 목차 조회
	@GetMapping("/detail")
	public String detail(@ModelAttribute CourseVO courseVO, String sbjTitle
						, Model model) {
		log.info("detail의 courseVO : " + courseVO);
		log.info("detail의 sbjTitle : " + sbjTitle);
		
		List<CourseDetailVO> courseDetailVOList = this.courseService.detail(courseVO);
		
		log.info("detail의 courseDetailVOList : " + courseDetailVOList);
		
		model.addAttribute("data", courseDetailVOList);
		model.addAttribute("sbjTitle", sbjTitle);
		
		return "course/week_stu";
	}
	
	//(학생&교수)강의 공지사항 목록 출력
	@GetMapping("/notice")
	public String notice(@ModelAttribute CourseVO courseVO
						, String sbjNum
						, String sbjTitle
						, Model model) {
		log.info("notice의 courseVO : " + courseVO);
		log.info("notice의 sbjNum : " + sbjNum);
		log.info("notice의 sbjTitle : " + sbjTitle);
		
		List<CourseNoticeVO> courseNoticeVOList = this.courseService.getNoticeList(courseVO);
		log.info("notice의 courseNoticeVOList : " + courseNoticeVOList);
		
		model.addAttribute("data", courseNoticeVOList);
		model.addAttribute("sbjNum", sbjNum);
		model.addAttribute("sbjTitle", sbjTitle);
		
		return "course/notice_stu";
	}
	
	//(학생&교수)강의 자료 목록 출력
	@GetMapping("/reference")
	public String reference(@ModelAttribute CourseVO courseVO
						, Model model
						, String sbjNum
						, String sbjTitle) {
		log.info("reference의 courseVO : " + courseVO);
		
		List<CourseReferenceVO> courseReferenceVOList = this.courseService.getReferenceList(courseVO);
		log.info("reference의 courseReferenceVOList : " + courseReferenceVOList);
		
		log.info("reference의 sbjTitle : " + sbjTitle);
		
		
		model.addAttribute("data", courseReferenceVOList);
		model.addAttribute("sbjNum", sbjNum);
		model.addAttribute("sbjTitle", sbjTitle);
		
		
		return "course/reference_stu";
	}
	
	@GetMapping("/noticeForm")
	public void courseNoticeForm() {}
	
	
	//(학생&교수)강의 공지사항 상세내용 조회
	@GetMapping("/noticeDetail")
	public String courseNoticeDetail(@ModelAttribute CourseNoticeVO courseNoticeVO
									, int snNum
									, String sbjNum
									, String sbjTitle
								    , Model model) {
		log.info("noticeDetail의 courseNoticeVO : " + courseNoticeVO);
		
		this.courseService.increaseNoticeHit(courseNoticeVO);
		
		CourseNoticeVO noticeDetailVO = this.courseService.noticeDetail(courseNoticeVO);
		log.info("noticeDetail의 noticeDetailVO : " + noticeDetailVO);
		
		model.addAttribute("data", noticeDetailVO);
		model.addAttribute("sbjNum", sbjNum);
		model.addAttribute("sbjTitle", sbjTitle);
		
		log.info("noticeDetail의 sbjTitle : " + sbjTitle);
		
		return "course/noticeDetail";
		
	}
	
	@GetMapping("/goDetail")
	public String goDetail(@ModelAttribute CourseNoticeVO courseNoticeVO
						 , int snNum
						 , String sbjNum
						 , String sbjTitle
					     , Model model) {
		
		CourseNoticeVO noticeDetailVO = this.courseService.noticeDetail(courseNoticeVO);
		log.info("noticeDetail의 noticeDetailVO : " + noticeDetailVO);
		
		model.addAttribute("data", noticeDetailVO);
		model.addAttribute("sbjNum", sbjNum);
		model.addAttribute("sbjTitle", sbjTitle);
		
		log.info("goDetail의 sbjTitle : " + sbjTitle);
		
		return "course/noticeDetail";
	}
	
	//(학생&교수)강의 과제 목록 출력
	@GetMapping("/assignment")
	public String getAssignmentList(String sbjNum, String sbjTitle, Model model) {
		log.info("assignment의 sbjNum : " + sbjNum);
		
		List<CourseAssignmentVO> courseAssignmentVOList = this.courseService.getAssignmentList(sbjNum);
		log.info("courseAssignmentVOList : " + courseAssignmentVOList);
		
		model.addAttribute("data", courseAssignmentVOList);
		model.addAttribute("sbjNum", sbjNum);
		model.addAttribute("sbjTitle", sbjTitle);
		
		return "course/assignment_stu";
	}
	
	
	//(교수)금학기 수강생 목록 조회
	@GetMapping("/studentList")
	public String getStudentList(String sbjNum, String sbjTitle, Model model) {
		
		List<Map<String, Object>> studentList = this.courseService.getStudentList(sbjNum);
		
		log.info("studentList : " + studentList);
		
		model.addAttribute("sbjNum", sbjNum);
		model.addAttribute("sbjTitle", sbjTitle);
		model.addAttribute("data", studentList);
		
		return "course/studentList";
	}
	
	//(교수)강의 공지사항 등록
	@GetMapping("/createNotice")
	public String createNotice(String sbjTitle, String sbjNum
			 				 , Model model) {
		
		model.addAttribute("sbjTitle", sbjTitle);
		model.addAttribute("sbjNum", sbjNum);
		
		return "course/noticeForm";
	}
	
	//(교수)강의 공지사항 등록
	@PostMapping("/createNotice")
	public String createNotice(@ModelAttribute CourseNoticeVO courseNoticeVO
							 , String sbjTitle
							 , String sbjNum
							 , Model model
							 , MultipartFile uploadFile) {
		log.info("createNotice의 sbjTitle : " + sbjTitle);
		log.info("createNotice의 sbjNum : " + sbjNum);
		log.info("createNotice의 courseNoticeVO : " + courseNoticeVO);
		
		//1) 파일이 저장되는 경로 세팅(/resources/upload)
		String uploadFolder
			= "C:\\eGovFrameDev-3.10.0-64bit\\workspace\\egovProj\\src\\main\\webapp\\resources\\upload";

	//2) 연/월/일 폴더가 없으면 생성
		File uploadPath = new File(uploadFolder, getFolder());
		log.info("uploadPath : " + uploadPath);
		
		if(uploadPath.exists()==false) {
			uploadPath.mkdirs();
		}
		//make folder 끝--------------------------------------------------------
		
		
		//파일명
		String uploadFileName = uploadFile.getOriginalFilename();		
		
		log.info("----------------");
		log.info("이미지 명 : " + uploadFileName);
		log.info("파일 크기 : " + uploadFile.getSize());
		
		//------------파일명 중복 방지 시작-----------------
		//java.util.UUID => 랜덤값을 생성
		UUID uuid = UUID.randomUUID();
		//ERASDFERASDFA_개똥이.jpg
		uploadFileName = uuid.toString() + "_" + uploadFileName;
		//------------파일명 중복 방지 끝-----------------
		
		//(어디에, 무엇을)
		//계획을 세움
		//C:\\upload\\2023\\01\\27\\ad61a88e-8519-4de9-9c67-c5732adcb10e_가트몬1.jpg
		File saveFile = new File(uploadPath,uploadFileName);
		
		//계획 실행. 파일 복사됨(클라이언트의 파일을 서버의 공간으로 복사)
		try {
			
			uploadFile.transferTo(saveFile);
			
		} catch (IllegalStateException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//1) filename : /2023/01/27/ad61a88e-8519-4de9-9c67-c5732adcb10e_가트몬1.jpg
		String filename = "/" + getFolder().replace("\\", "/") + "/" +
				uploadFileName;
		
		courseNoticeVO.setSnFilename(filename);
		log.info("(set 후)createNotice의 courseNoticeVO : " + courseNoticeVO);
		log.info("filename : " + filename);
		
		
		int result = this.courseService.createNotice(courseNoticeVO);
		
		log.info("createNotice의 result : " + result);
		//int snHit = courseNoticeVO.getSnHit();
		
		if(result > 0 ) {
			
			model.addAttribute("sbjTitle", sbjTitle);
			model.addAttribute("sbjNum", sbjNum);
			
			return "redirect:/course/notice";
		}else {
			model.addAttribute("sbjTitle", sbjTitle);
			model.addAttribute("sbjNum", sbjNum);
			return "redirect:/course/notice";
		}
		
	}
	
	//(교수)강의 공지사항 수정
	@GetMapping("/noticeModify")
	public String noticeModify(@ModelAttribute CourseNoticeVO courseNoticeVO
			, String sbjNum
			, String sbjTitle
			, Model model) {
		
		log.info("noticeDetail의 courseNoticeVO : " + courseNoticeVO);
		log.info("noticeModify의 sbjTitle : " + sbjTitle);
		
		CourseNoticeVO noticeDetailVO = this.courseService.noticeDetail(courseNoticeVO);
		log.info("noticeModify의 noticeDetailVO : " + noticeDetailVO);
		
		
		model.addAttribute("data", noticeDetailVO);
		model.addAttribute("sbjNum", sbjNum);
		model.addAttribute("sbjTitle", sbjTitle);
		
		return "course/noticeModifyForm";
	}
	
	//(교수)공지사항 삭제
	@GetMapping("/deleteNotice")
	public String deleteNotice(@ModelAttribute CourseNoticeVO courseNoticeVO
						  	 , String sbjNum
							 , String sbjTitle
							 , Model model) {
		log.info("deleteNotice의  courseNoticeVO : " + courseNoticeVO);
		int result = this.courseService.deleteNotice(courseNoticeVO);
		
		
		if(result > 0) {
			model.addAttribute("sbjNum", sbjNum);
			model.addAttribute("sbjTitle", sbjTitle);
			
			return "redirect:/course/notice";
		}else {
			model.addAttribute("snNum", courseNoticeVO.getSnNum());
			model.addAttribute("sbjNum", sbjNum);
			model.addAttribute("sbjTitle", sbjTitle);
			return "course/noticeDetail";
		}
		
	}
	
	//(교수)강의 공지사항 수정
	@PostMapping("/noticeModify")
	public String noticeModify2(@ModelAttribute CourseNoticeVO courseNoticeVO
								, String sbjNum
								, String sbjTitle
								, Model model) {
		log.info("noticeModify의 sbjNum : " + sbjNum);
		log.info("noticeModify의 sbjTitle : " + sbjTitle);
		
		log.info("noticeModify의 courseNoticeVO : " + courseNoticeVO);
		int snNum = courseNoticeVO.getSnNum();
		
		
		int result = this.courseService.noticeModify(courseNoticeVO);
		log.info("noticeModify의 result : " + result);
		
		if(result > 0) {
			model.addAttribute("snNum", snNum);
			model.addAttribute("sbjNum", sbjNum);
			model.addAttribute("sbjTitle", sbjTitle);
			
			return "redirect:/course/noticeDetail";
		}else {
			model.addAttribute("snNum", snNum);
			model.addAttribute("sbjTitle", sbjTitle);
			model.addAttribute("sbjNum", sbjNum);
			return "course/notice_stu";
		}
		
	}
	
	//(교수)자료 게시글 등록
	@PostMapping("/createReference")
	public String createReference(@ModelAttribute CourseReferenceVO courseReferenceVO
								, String sbjNum
								, String sbjTitle
								, MultipartFile uploadFile
								, Model model) {
		log.info("createReference의 courseReferenceVO : " + courseReferenceVO);
		
		//1) 파일이 저장되는 경로 세팅(/resources/upload)
			String uploadFolder
				= "C:\\eGovFrameDev-3.10.0-64bit\\workspace\\egovProj\\src\\main\\webapp\\resources\\upload";

		//2) 연/월/일 폴더가 없으면 생성
			File uploadPath = new File(uploadFolder, getFolder());
			log.info("uploadPath : " + uploadPath);
			
			if(uploadPath.exists()==false) {
				uploadPath.mkdirs();
			}
			//make folder 끝--------------------------------------------------------
			
			
			//파일명
			String uploadFileName = uploadFile.getOriginalFilename();		
			
			log.info("----------------");
			log.info("이미지 명 : " + uploadFileName);
			log.info("파일 크기 : " + uploadFile.getSize());
			
			//------------파일명 중복 방지 시작-----------------
			//java.util.UUID => 랜덤값을 생성
			UUID uuid = UUID.randomUUID();
			//ERASDFERASDFA_개똥이.jpg
			uploadFileName = uuid.toString() + "_" + uploadFileName;
			//------------파일명 중복 방지 끝-----------------
			
			//(어디에, 무엇을)
			//계획을 세움
			//C:\\upload\\2023\\01\\27\\ad61a88e-8519-4de9-9c67-c5732adcb10e_가트몬1.jpg
			File saveFile = new File(uploadPath,uploadFileName);
			
			//계획 실행. 파일 복사됨(클라이언트의 파일을 서버의 공간으로 복사)
			try {
				
				uploadFile.transferTo(saveFile);
				
			} catch (IllegalStateException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			//1) filename : /2023/01/27/ad61a88e-8519-4de9-9c67-c5732adcb10e_가트몬1.jpg
			String filename = "/" + getFolder().replace("\\", "/") + "/" +
					uploadFileName;
			
			courseReferenceVO.setRrNm(filename);
			log.info("(set 후)createReference의 courseReferenceVO : " + courseReferenceVO);
			log.info("filename : " + filename);
			
			
			int result = this.courseService.createReference(courseReferenceVO);
			log.info("createReference의 result : " + result);
			
			
			if(result > 0) {
				model.addAttribute("sbjNum", sbjNum);
				model.addAttribute("sbjTitle", sbjTitle);
				return "redirect:/course/reference";
			}else {
				model.addAttribute("sbjNum", sbjNum);
				model.addAttribute("sbjTitle", sbjTitle);
				return "redirect:/course/reference";
			}
			
			
			
	}
	
	//연/월/일 폴더 생성
	public static String getFolder() {
		//2023-01-27 형식(format) 지정
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		//날짜 객체 생성(java.util 패키지)
		Date date = new Date();
		//2023-01-27=>2023\\01\\27
		String str = sdf.format(date);
		//단순 날짜 문자를 File객체의 폴더 타입으로 바꾸기
		//2023\\01\\27
		return str.replace("-", File.separator);
	}
	
	
	
	//(교수)자료 게시글 삭제
	@GetMapping("/deleteReference")
	public String deleteReference(@ModelAttribute CourseReferenceVO courseReferenceVO
								, String sbjNum
								, String sbjTitle
								, Model model) {
		log.info("deleteRefernce의  courseReferenceVO : " + courseReferenceVO);
		
		int result = this.courseService.deleteReference(courseReferenceVO);
		
		if(result > 0) {
			model.addAttribute("sbjNum", sbjNum);
			model.addAttribute("sbjTitle", sbjTitle);
			return "redirect:/course/reference";
			
		}else {
			model.addAttribute("sbjNum", sbjNum);
			model.addAttribute("sbjTitle", sbjTitle);
			return "redirect:/course/noticeDetail";
		}
		
	}

}








